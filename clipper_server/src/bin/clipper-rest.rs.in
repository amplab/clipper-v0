// #![deny(missing_docs)]
// #![deny(warnings)]

extern crate docopt;
extern crate clipper;
extern crate toml;
extern crate rustc_serialize;
// extern crate linear_models;
extern crate rand;
extern crate hyper;
extern crate time;
extern crate chan_signal;
// extern crate serde;

// #[macro_use]
// extern crate log;
// extern crate env_logger;

use docopt::Docopt;
use chan_signal::Signal;
use std::sync::mpsc;
use std::thread;
// use std::time::Duration;

pub mod rest;
use log::{LogLevelFilter};
use env_logger::LogBuilder;


#[cfg_attr(rustfmt, rustfmt_skip)]
const USAGE: &'static str = "
Clipper Server

Usage:
  clipper start --conf=</path/to/conf.toml>
  clipper -h

Options:
  -h --help                             Show this screen.
  --conf=</path/to/conf.toml>           Path to features config file.
";

#[cfg_attr(rustfmt, rustfmt_skip)]
#[allow(dead_code)]
const OLD_USAGE: &'static str = "
Clipper Server

Usage:
  clipper digits --feature-conf=</path/to/features.toml> --bench-conf=<digits.conf>
  clipper featurelats <b>
  clipper start --feature-conf=</path/to/features.toml>
  clipper -h

Options:
  -h --help                              Show this screen.
  --feature-conf=</path/to/features>             Path to features config file.
  --bench-conf=</path/to/digits.conf>    Path to mnist data file
  // --batch-size=<bs>                     Size of feature batch 
  
";

#[derive(Debug, RustcDecodable)]
struct Args {
    // flag_speed: isize,
    // flag_drifting: bool,
    // flag_bench_conf: Option<String>,
    flag_conf: String,
    // arg_b: Option<usize>,
    // cmd_digits: bool,
    // cmd_featurelats: bool,
    cmd_start: bool,
}


pub fn main() {

    // env_logger::init().unwrap();
    let mut builder = LogBuilder::new();
    builder.filter(None, LogLevelFilter::Info);
    builder.init().unwrap();
    error!("TEST ERROR MESSAGE!");
    info!("TEST INFO MESSAGE!");

    let args: Args = Docopt::new(USAGE)
                         .and_then(|d| d.decode())
                         .unwrap_or_else(|e| e.exit());

    info!("{:?}", args);

    // NOTE: Notify must be called before spawning any threads for the chan_signal
    // library to work correctly.
    let signal = chan_signal::notify(&[Signal::INT, Signal::TERM]);
    if args.cmd_start {
        // let features = parse_feature_config(&args.flag_feature_conf);
        let (tx, rx) = mpsc::channel::<()>();
        let jh = thread::spawn(move || rest::start(rx, &args.flag_conf));
        signal.recv().unwrap();
        info!("shutdown signal detected");
        // thread::sleep(Duration::from_secs(5));
        tx.send(()).unwrap();
        jh.join().unwrap();
    }

    // if args.cmd_digits {
    //     let features = parse_feature_config(&args.flag_feature_conf);
    //     let digits_conf = parse_digits_config(&args.flag_bench_conf.unwrap());
    //     digits_benchmark::run(features, digits_conf);
    // } else if args.cmd_featurelats {
    //     faas_benchmark::feature_batch_latency(args.arg_b.unwrap());
    // } else if args.cmd_start {
    //     let features = parse_feature_config(&args.flag_feature_conf);
    //     rest::start_listening(features, InputType::Integer(784));
    // }
}

